# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class DHCPRange(pulumi.CustomResource):
    comment: pulumi.Output[str]
    end_addr: pulumi.Output[str]
    members: pulumi.Output[list]
    name: pulumi.Output[str]
    network: pulumi.Output[str]
    network_view: pulumi.Output[str]
    restart_if_needed: pulumi.Output[bool]
    server_association_type: pulumi.Output[str]
    start_addr: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, comment=None, end_addr=None, members=None, name=None, network=None, network_view=None, restart_if_needed=None, server_association_type=None, start_addr=None, __name__=None, __opts__=None):
        """
        Create a DHCPRange resource with the given unique name, props, and options.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['comment'] = comment

        if end_addr is None:
            raise TypeError("Missing required property 'end_addr'")
        __props__['end_addr'] = end_addr

        __props__['members'] = members

        __props__['name'] = name

        __props__['network'] = network

        __props__['network_view'] = network_view

        __props__['restart_if_needed'] = restart_if_needed

        __props__['server_association_type'] = server_association_type

        if start_addr is None:
            raise TypeError("Missing required property 'start_addr'")
        __props__['start_addr'] = start_addr

        super(DHCPRange, __self__).__init__(
            'infoblox:index/dHCPRange:DHCPRange',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

