# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class Provider(pulumi.ProviderResource):
    def __init__(__self__, resource_name, opts=None, allow_unverified_ssl=None, client_debug=None, password=None, server=None, timeout=None, username=None, wapi_version=None, __name__=None, __opts__=None):
        """
        The provider type for the infoblox package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://pulumi.io/reference/programming-model.html#providers) for more information.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if allow_unverified_ssl is None:
            allow_unverified_ssl = utilities.get_env_bool('INFOBLOX_ALLOW_UNVERIFIED_SSL')
        __props__['allow_unverified_ssl'] = pulumi.Output.from_input(allow_unverified_ssl).apply(json.dumps) if allow_unverified_ssl is not None else None

        if client_debug is None:
            client_debug = utilities.get_env_bool('INFOBLOX_CLIENT_DEBUG')
        __props__['client_debug'] = pulumi.Output.from_input(client_debug).apply(json.dumps) if client_debug is not None else None

        if password is None:
            password = utilities.get_env('INFOBLOX_PASSWORD')
        __props__['password'] = password

        if server is None:
            server = utilities.get_env('INFOBLOX_SERVER')
        __props__['server'] = server

        if timeout is None:
            timeout = utilities.get_env_int('INFOBLOX_CLIENT_TIMEOUT')
        __props__['timeout'] = pulumi.Output.from_input(timeout).apply(json.dumps) if timeout is not None else None

        if username is None:
            username = utilities.get_env('INFOBLOX_USERNAME')
        __props__['username'] = username

        if wapi_version is None:
            wapi_version = utilities.get_env('INFOBLOX_WAPI_VERSION')
        __props__['wapi_version'] = wapi_version

        super(Provider, __self__).__init__(
            'infoblox',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

