# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class ZoneDelegated(pulumi.CustomResource):
    comment: pulumi.Output[str]
    delegate_tos: pulumi.Output[list]
    delegated_ttl: pulumi.Output[float]
    disable: pulumi.Output[bool]
    fqdn: pulumi.Output[str]
    locked: pulumi.Output[bool]
    ns_group: pulumi.Output[str]
    reference: pulumi.Output[str]
    use_delegated_ttl: pulumi.Output[bool]
    view: pulumi.Output[str]
    zone_format: pulumi.Output[str]
    def __init__(__self__, resource_name, opts=None, comment=None, delegate_tos=None, delegated_ttl=None, disable=None, fqdn=None, locked=None, ns_group=None, use_delegated_ttl=None, view=None, zone_format=None, __name__=None, __opts__=None):
        """
        Create a ZoneDelegated resource with the given unique name, props, and options.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        __props__['comment'] = comment

        if delegate_tos is None:
            raise TypeError("Missing required property 'delegate_tos'")
        __props__['delegate_tos'] = delegate_tos

        __props__['delegated_ttl'] = delegated_ttl

        __props__['disable'] = disable

        if fqdn is None:
            raise TypeError("Missing required property 'fqdn'")
        __props__['fqdn'] = fqdn

        __props__['locked'] = locked

        __props__['ns_group'] = ns_group

        __props__['use_delegated_ttl'] = use_delegated_ttl

        __props__['view'] = view

        __props__['zone_format'] = zone_format

        __props__['reference'] = None

        super(ZoneDelegated, __self__).__init__(
            'infoblox:index/zoneDelegated:ZoneDelegated',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

