// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class DNSView extends pulumi.CustomResource {
    /**
     * Get an existing DNSView resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DNSViewState, opts?: pulumi.CustomResourceOptions): DNSView {
        return new DNSView(name, <any>state, { ...opts, id: id });
    }

    /**
     * Comment for the DNS view; maximum 64 characters.
     */
    public readonly comment: pulumi.Output<string | undefined>;
    /**
     * The NIOS appliance provides one default DNS view. You can rename the default view and change its settings, but you
     * cannot delete it. There must always be at least one DNS view in the appliance.
     */
    public /*out*/ readonly isDefault: pulumi.Output<boolean>;
    /**
     * Name of the DNS view.
     */
    public readonly name: pulumi.Output<string>;

    /**
     * Create a DNSView resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: DNSViewArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DNSViewArgs | DNSViewState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: DNSViewState = argsOrState as DNSViewState | undefined;
            inputs["comment"] = state ? state.comment : undefined;
            inputs["isDefault"] = state ? state.isDefault : undefined;
            inputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as DNSViewArgs | undefined;
            inputs["comment"] = args ? args.comment : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["isDefault"] = undefined /*out*/;
        }
        super("infoblox:index/dNSView:DNSView", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DNSView resources.
 */
export interface DNSViewState {
    /**
     * Comment for the DNS view; maximum 64 characters.
     */
    readonly comment?: pulumi.Input<string>;
    /**
     * The NIOS appliance provides one default DNS view. You can rename the default view and change its settings, but you
     * cannot delete it. There must always be at least one DNS view in the appliance.
     */
    readonly isDefault?: pulumi.Input<boolean>;
    /**
     * Name of the DNS view.
     */
    readonly name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DNSView resource.
 */
export interface DNSViewArgs {
    /**
     * Comment for the DNS view; maximum 64 characters.
     */
    readonly comment?: pulumi.Input<string>;
    /**
     * Name of the DNS view.
     */
    readonly name?: pulumi.Input<string>;
}
