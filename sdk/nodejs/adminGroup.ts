// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class AdminGroup extends pulumi.CustomResource {
    /**
     * Get an existing AdminGroup resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AdminGroupState, opts?: pulumi.CustomResourceOptions): AdminGroup {
        return new AdminGroup(name, <any>state, { ...opts, id: id });
    }

    /**
     * Methods the group can use to access Infoblox
     */
    public readonly accessMethods: pulumi.Output<string[]>;
    /**
     * Comment field
     */
    public readonly comment: pulumi.Output<string | undefined>;
    /**
     * Whether the Admin Group is disabled or not
     */
    public readonly disable: pulumi.Output<boolean>;
    /**
     * List of email addresses to associated with the Admin Group
     */
    public readonly emailAddresses: pulumi.Output<string[] | undefined>;
    /**
     * The name of the Admin Group
     */
    public readonly name: pulumi.Output<string>;
    /**
     * List of roles to associated with the Admin Group
     */
    public readonly roles: pulumi.Output<string[] | undefined>;
    /**
     * Whether the group is a super user group or not
     */
    public readonly superuser: pulumi.Output<boolean>;

    /**
     * Create a AdminGroup resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: AdminGroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AdminGroupArgs | AdminGroupState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: AdminGroupState = argsOrState as AdminGroupState | undefined;
            inputs["accessMethods"] = state ? state.accessMethods : undefined;
            inputs["comment"] = state ? state.comment : undefined;
            inputs["disable"] = state ? state.disable : undefined;
            inputs["emailAddresses"] = state ? state.emailAddresses : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["roles"] = state ? state.roles : undefined;
            inputs["superuser"] = state ? state.superuser : undefined;
        } else {
            const args = argsOrState as AdminGroupArgs | undefined;
            inputs["accessMethods"] = args ? args.accessMethods : undefined;
            inputs["comment"] = args ? args.comment : undefined;
            inputs["disable"] = args ? args.disable : undefined;
            inputs["emailAddresses"] = args ? args.emailAddresses : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["roles"] = args ? args.roles : undefined;
            inputs["superuser"] = args ? args.superuser : undefined;
        }
        super("infoblox:index/adminGroup:AdminGroup", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AdminGroup resources.
 */
export interface AdminGroupState {
    /**
     * Methods the group can use to access Infoblox
     */
    readonly accessMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Comment field
     */
    readonly comment?: pulumi.Input<string>;
    /**
     * Whether the Admin Group is disabled or not
     */
    readonly disable?: pulumi.Input<boolean>;
    /**
     * List of email addresses to associated with the Admin Group
     */
    readonly emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Admin Group
     */
    readonly name?: pulumi.Input<string>;
    /**
     * List of roles to associated with the Admin Group
     */
    readonly roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the group is a super user group or not
     */
    readonly superuser?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a AdminGroup resource.
 */
export interface AdminGroupArgs {
    /**
     * Methods the group can use to access Infoblox
     */
    readonly accessMethods?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Comment field
     */
    readonly comment?: pulumi.Input<string>;
    /**
     * Whether the Admin Group is disabled or not
     */
    readonly disable?: pulumi.Input<boolean>;
    /**
     * List of email addresses to associated with the Admin Group
     */
    readonly emailAddresses?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * The name of the Admin Group
     */
    readonly name?: pulumi.Input<string>;
    /**
     * List of roles to associated with the Admin Group
     */
    readonly roles?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Whether the group is a super user group or not
     */
    readonly superuser?: pulumi.Input<boolean>;
}
