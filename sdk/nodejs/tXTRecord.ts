// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class TXTRecord extends pulumi.CustomResource {
    /**
     * Get an existing TXTRecord resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: TXTRecordState, opts?: pulumi.CustomResourceOptions): TXTRecord {
        return new TXTRecord(name, <any>state, { ...opts, id: id });
    }

    public readonly comment: pulumi.Output<string | undefined>;
    public readonly name: pulumi.Output<string>;
    public readonly text: pulumi.Output<string>;
    public readonly ttl: pulumi.Output<number | undefined>;
    public readonly useTtl: pulumi.Output<boolean | undefined>;
    public readonly view: pulumi.Output<string>;
    public readonly zone: pulumi.Output<string>;

    /**
     * Create a TXTRecord resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: TXTRecordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: TXTRecordArgs | TXTRecordState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: TXTRecordState = argsOrState as TXTRecordState | undefined;
            inputs["comment"] = state ? state.comment : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["text"] = state ? state.text : undefined;
            inputs["ttl"] = state ? state.ttl : undefined;
            inputs["useTtl"] = state ? state.useTtl : undefined;
            inputs["view"] = state ? state.view : undefined;
            inputs["zone"] = state ? state.zone : undefined;
        } else {
            const args = argsOrState as TXTRecordArgs | undefined;
            if (!args || args.text === undefined) {
                throw new Error("Missing required property 'text'");
            }
            inputs["comment"] = args ? args.comment : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["text"] = args ? args.text : undefined;
            inputs["ttl"] = args ? args.ttl : undefined;
            inputs["useTtl"] = args ? args.useTtl : undefined;
            inputs["view"] = args ? args.view : undefined;
            inputs["zone"] = args ? args.zone : undefined;
        }
        super("infoblox:index/tXTRecord:TXTRecord", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering TXTRecord resources.
 */
export interface TXTRecordState {
    readonly comment?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly text?: pulumi.Input<string>;
    readonly ttl?: pulumi.Input<number>;
    readonly useTtl?: pulumi.Input<boolean>;
    readonly view?: pulumi.Input<string>;
    readonly zone?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a TXTRecord resource.
 */
export interface TXTRecordArgs {
    readonly comment?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly text: pulumi.Input<string>;
    readonly ttl?: pulumi.Input<number>;
    readonly useTtl?: pulumi.Input<boolean>;
    readonly view?: pulumi.Input<string>;
    readonly zone?: pulumi.Input<string>;
}
