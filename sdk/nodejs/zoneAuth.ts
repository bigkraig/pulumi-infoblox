// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class ZoneAuth extends pulumi.CustomResource {
    /**
     * Get an existing ZoneAuth resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ZoneAuthState, opts?: pulumi.CustomResourceOptions): ZoneAuth {
        return new ZoneAuth(name, <any>state, { ...opts, id: id });
    }

    /**
     * Determines whether dynamic DNS updates are allowed from a named ACL, or from a list of IPv4/IPv6 addresses,
     * networks, and TSIG keys for the hosts.
     */
    public readonly allowTransfers: pulumi.Output<{ _struct?: string, address?: string, permission?: string, tsigKey?: string, tsigKeyAlg?: string, tsigKeyName?: string, useTsigKeyName?: boolean }[] | undefined>;
    /**
     * Determines whether dynamic DNS updates are allowed from a named ACL, or from a list of IPv4/IPv6 addresses,
     * networks, and TSIG keys for the hosts.
     */
    public readonly allowUpdates: pulumi.Output<{ _struct?: string, address?: string, permission?: string, tsigKey?: string, tsigKeyAlg?: string, tsigKeyName?: string, useTsigKeyName?: boolean }[] | undefined>;
    /**
     * Comment for the zone; maximum 256 characters
     */
    public readonly comment: pulumi.Output<string | undefined>;
    /**
     * If this flag is set to True then copy allowed IPs from Allow Transfer to Also Notify.
     */
    public readonly copyXferToNotify: pulumi.Output<boolean | undefined>;
    /**
     * Determines whether a zone is disabled or not
     */
    public readonly disable: pulumi.Output<boolean>;
    /**
     * If this is set to True, DNS integrity check is enabled for this zone
     */
    public readonly dnsIntegrityEnable: pulumi.Output<boolean>;
    /**
     * The Grid member that performs DNS integrity checks for this zone
     */
    public readonly dnsIntegrityMember: pulumi.Output<string>;
    /**
     * The primary preference list with Grid member names and/or External Server structs for this member.
     */
    public readonly externalPrimaries: pulumi.Output<{ address: string, name: string, sharedWithMsParentDelegation: boolean, stealth?: boolean, tsigKey?: string, tsigKeyAlg?: string, tsigKeyName?: string, useTsigKeyName?: boolean }[] | undefined>;
    /**
     * The primary preference list with Grid member names and/or External Server structs for this member.
     */
    public readonly externalSecondaries: pulumi.Output<{ address: string, name: string, sharedWithMsParentDelegation: boolean, stealth?: boolean, tsigKey?: string, tsigKeyAlg?: string, tsigKeyName?: string, useTsigKeyName?: boolean }[] | undefined>;
    /**
     * The name of this DNS zone. For a reverse zone, this is in “address/cidr” format
     */
    public readonly fqdn: pulumi.Output<string>;
    /**
     * The grid primary servers for this zone.
     */
    public readonly gridPrimaries: pulumi.Output<{ enablePreferredPrimaries?: boolean, gridReplicate?: boolean, lead?: boolean, name: string, preferredPrimaries?: { address: string, name: string, sharedWithMsParentDelegation: boolean, stealth?: boolean, tsigKey?: string, tsigKeyAlg?: string, tsigKeyName?: string, useTsigKeyName?: boolean }[], stealth?: boolean }[] | undefined>;
    /**
     * Determines if the server is duplicated with parent delegation.cannot be updated, nor written
     */
    public readonly gridPrimarySharedWithMsParentDelegation: pulumi.Output<boolean>;
    /**
     * The grid primary servers for this zone.
     */
    public readonly gridSecondaries: pulumi.Output<{ enablePreferredPrimaries?: boolean, gridReplicate?: boolean, lead?: boolean, name: string, preferredPrimaries?: { address: string, name: string, sharedWithMsParentDelegation: boolean, stealth?: boolean, tsigKey?: string, tsigKeyAlg?: string, tsigKeyName?: string, useTsigKeyName?: boolean }[], stealth?: boolean }[] | undefined>;
    /**
     * If you enable this flag, other administrators cannot make conflicting changes
     */
    public readonly locked: pulumi.Output<boolean>;
    /**
     * The name of a superuser or the administrator who locked this zone (read-only)
     */
    public /*out*/ readonly lockedBy: pulumi.Output<string>;
    /**
     * The name of the network view in which this zone resides (read-only)
     */
    public /*out*/ readonly networkView: pulumi.Output<string>;
    /**
     * The name server group that serves DNS for this zone.
     */
    public readonly nsGroup: pulumi.Output<string | undefined>;
    /**
     * The RFC2317 prefix value of this DNS zone
     */
    public readonly prefix: pulumi.Output<string | undefined>;
    /**
     * Restarts the member service. The default value is False. Not readable
     */
    public readonly restartIfNeeded: pulumi.Output<boolean>;
    /**
     * The DNS scavenging settings object provides information about scavenging configuration e.g. conditions under which
     * records can be scavenged, periodicity of scavenging operations.
     */
    public readonly scavengingSettings: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The Time to Live (TTL) value of the SOA record of this zone
     */
    public readonly soaDefaultTtl: pulumi.Output<number | undefined>;
    /**
     * This setting defines the amount of time, in seconds, after which the secondary server stops giving out answers about
     * the zone because the zone data is too old to be useful. The default is one week.
     */
    public readonly soaExpire: pulumi.Output<number | undefined>;
    /**
     * The negative Time to Live (TTL)
     */
    public readonly soaNegativeTtl: pulumi.Output<number | undefined>;
    /**
     * This indicates the interval at which a secondary server sends a message to the primary server for a zone to check
     * that its data is current, and retrieve fresh data if it is not
     */
    public readonly soaRefresh: pulumi.Output<number | undefined>;
    /**
     * This indicates how long a secondary server must wait before attempting to recontact the primary server after a
     * connection failure between the two servers occurs
     */
    public readonly soaRetry: pulumi.Output<number | undefined>;
    /**
     * The serial number in the SOA record incrementally changes every time the record is modified. The SOA serial number
     * to be used in conjunction with set_soa_serial_number (read-only)
     */
    public readonly soaSerialNumber: pulumi.Output<number>;
    /**
     * allow_transfer
     */
    public readonly useAllowTransfer: pulumi.Output<boolean>;
    /**
     * Apply policy to dynamic updates and inbound zone transfers (This value applies only if the host name restriction
     * policy is set to “Strict Hostname Checking”.)
     */
    public readonly useCheckNamesPolicy: pulumi.Output<boolean>;
    /**
     * Use flag for: copy_xfer_to_notify.
     */
    public readonly useCopyXferToNotify: pulumi.Output<boolean>;
    /**
     * This flag controls whether the zone is using an external primary.
     */
    public readonly useExternalPrimary: pulumi.Output<boolean>;
    /**
     * The name of the DNS view in which the zone resides
     */
    public readonly view: pulumi.Output<string>;
    /**
     * Determines the format of this zone - API default FORWARD
     */
    public readonly zoneFormat: pulumi.Output<string>;

    /**
     * Create a ZoneAuth resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ZoneAuthArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ZoneAuthArgs | ZoneAuthState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ZoneAuthState = argsOrState as ZoneAuthState | undefined;
            inputs["allowTransfers"] = state ? state.allowTransfers : undefined;
            inputs["allowUpdates"] = state ? state.allowUpdates : undefined;
            inputs["comment"] = state ? state.comment : undefined;
            inputs["copyXferToNotify"] = state ? state.copyXferToNotify : undefined;
            inputs["disable"] = state ? state.disable : undefined;
            inputs["dnsIntegrityEnable"] = state ? state.dnsIntegrityEnable : undefined;
            inputs["dnsIntegrityMember"] = state ? state.dnsIntegrityMember : undefined;
            inputs["externalPrimaries"] = state ? state.externalPrimaries : undefined;
            inputs["externalSecondaries"] = state ? state.externalSecondaries : undefined;
            inputs["fqdn"] = state ? state.fqdn : undefined;
            inputs["gridPrimaries"] = state ? state.gridPrimaries : undefined;
            inputs["gridPrimarySharedWithMsParentDelegation"] = state ? state.gridPrimarySharedWithMsParentDelegation : undefined;
            inputs["gridSecondaries"] = state ? state.gridSecondaries : undefined;
            inputs["locked"] = state ? state.locked : undefined;
            inputs["lockedBy"] = state ? state.lockedBy : undefined;
            inputs["networkView"] = state ? state.networkView : undefined;
            inputs["nsGroup"] = state ? state.nsGroup : undefined;
            inputs["prefix"] = state ? state.prefix : undefined;
            inputs["restartIfNeeded"] = state ? state.restartIfNeeded : undefined;
            inputs["scavengingSettings"] = state ? state.scavengingSettings : undefined;
            inputs["soaDefaultTtl"] = state ? state.soaDefaultTtl : undefined;
            inputs["soaExpire"] = state ? state.soaExpire : undefined;
            inputs["soaNegativeTtl"] = state ? state.soaNegativeTtl : undefined;
            inputs["soaRefresh"] = state ? state.soaRefresh : undefined;
            inputs["soaRetry"] = state ? state.soaRetry : undefined;
            inputs["soaSerialNumber"] = state ? state.soaSerialNumber : undefined;
            inputs["useAllowTransfer"] = state ? state.useAllowTransfer : undefined;
            inputs["useCheckNamesPolicy"] = state ? state.useCheckNamesPolicy : undefined;
            inputs["useCopyXferToNotify"] = state ? state.useCopyXferToNotify : undefined;
            inputs["useExternalPrimary"] = state ? state.useExternalPrimary : undefined;
            inputs["view"] = state ? state.view : undefined;
            inputs["zoneFormat"] = state ? state.zoneFormat : undefined;
        } else {
            const args = argsOrState as ZoneAuthArgs | undefined;
            if (!args || args.fqdn === undefined) {
                throw new Error("Missing required property 'fqdn'");
            }
            inputs["allowTransfers"] = args ? args.allowTransfers : undefined;
            inputs["allowUpdates"] = args ? args.allowUpdates : undefined;
            inputs["comment"] = args ? args.comment : undefined;
            inputs["copyXferToNotify"] = args ? args.copyXferToNotify : undefined;
            inputs["disable"] = args ? args.disable : undefined;
            inputs["dnsIntegrityEnable"] = args ? args.dnsIntegrityEnable : undefined;
            inputs["dnsIntegrityMember"] = args ? args.dnsIntegrityMember : undefined;
            inputs["externalPrimaries"] = args ? args.externalPrimaries : undefined;
            inputs["externalSecondaries"] = args ? args.externalSecondaries : undefined;
            inputs["fqdn"] = args ? args.fqdn : undefined;
            inputs["gridPrimaries"] = args ? args.gridPrimaries : undefined;
            inputs["gridPrimarySharedWithMsParentDelegation"] = args ? args.gridPrimarySharedWithMsParentDelegation : undefined;
            inputs["gridSecondaries"] = args ? args.gridSecondaries : undefined;
            inputs["locked"] = args ? args.locked : undefined;
            inputs["nsGroup"] = args ? args.nsGroup : undefined;
            inputs["prefix"] = args ? args.prefix : undefined;
            inputs["restartIfNeeded"] = args ? args.restartIfNeeded : undefined;
            inputs["scavengingSettings"] = args ? args.scavengingSettings : undefined;
            inputs["soaDefaultTtl"] = args ? args.soaDefaultTtl : undefined;
            inputs["soaExpire"] = args ? args.soaExpire : undefined;
            inputs["soaNegativeTtl"] = args ? args.soaNegativeTtl : undefined;
            inputs["soaRefresh"] = args ? args.soaRefresh : undefined;
            inputs["soaRetry"] = args ? args.soaRetry : undefined;
            inputs["soaSerialNumber"] = args ? args.soaSerialNumber : undefined;
            inputs["useAllowTransfer"] = args ? args.useAllowTransfer : undefined;
            inputs["useCheckNamesPolicy"] = args ? args.useCheckNamesPolicy : undefined;
            inputs["useCopyXferToNotify"] = args ? args.useCopyXferToNotify : undefined;
            inputs["useExternalPrimary"] = args ? args.useExternalPrimary : undefined;
            inputs["view"] = args ? args.view : undefined;
            inputs["zoneFormat"] = args ? args.zoneFormat : undefined;
            inputs["lockedBy"] = undefined /*out*/;
            inputs["networkView"] = undefined /*out*/;
        }
        super("infoblox:index/zoneAuth:ZoneAuth", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ZoneAuth resources.
 */
export interface ZoneAuthState {
    /**
     * Determines whether dynamic DNS updates are allowed from a named ACL, or from a list of IPv4/IPv6 addresses,
     * networks, and TSIG keys for the hosts.
     */
    readonly allowTransfers?: pulumi.Input<pulumi.Input<{ _struct?: pulumi.Input<string>, address?: pulumi.Input<string>, permission?: pulumi.Input<string>, tsigKey?: pulumi.Input<string>, tsigKeyAlg?: pulumi.Input<string>, tsigKeyName?: pulumi.Input<string>, useTsigKeyName?: pulumi.Input<boolean> }>[]>;
    /**
     * Determines whether dynamic DNS updates are allowed from a named ACL, or from a list of IPv4/IPv6 addresses,
     * networks, and TSIG keys for the hosts.
     */
    readonly allowUpdates?: pulumi.Input<pulumi.Input<{ _struct?: pulumi.Input<string>, address?: pulumi.Input<string>, permission?: pulumi.Input<string>, tsigKey?: pulumi.Input<string>, tsigKeyAlg?: pulumi.Input<string>, tsigKeyName?: pulumi.Input<string>, useTsigKeyName?: pulumi.Input<boolean> }>[]>;
    /**
     * Comment for the zone; maximum 256 characters
     */
    readonly comment?: pulumi.Input<string>;
    /**
     * If this flag is set to True then copy allowed IPs from Allow Transfer to Also Notify.
     */
    readonly copyXferToNotify?: pulumi.Input<boolean>;
    /**
     * Determines whether a zone is disabled or not
     */
    readonly disable?: pulumi.Input<boolean>;
    /**
     * If this is set to True, DNS integrity check is enabled for this zone
     */
    readonly dnsIntegrityEnable?: pulumi.Input<boolean>;
    /**
     * The Grid member that performs DNS integrity checks for this zone
     */
    readonly dnsIntegrityMember?: pulumi.Input<string>;
    /**
     * The primary preference list with Grid member names and/or External Server structs for this member.
     */
    readonly externalPrimaries?: pulumi.Input<pulumi.Input<{ address: pulumi.Input<string>, name: pulumi.Input<string>, sharedWithMsParentDelegation?: pulumi.Input<boolean>, stealth?: pulumi.Input<boolean>, tsigKey?: pulumi.Input<string>, tsigKeyAlg?: pulumi.Input<string>, tsigKeyName?: pulumi.Input<string>, useTsigKeyName?: pulumi.Input<boolean> }>[]>;
    /**
     * The primary preference list with Grid member names and/or External Server structs for this member.
     */
    readonly externalSecondaries?: pulumi.Input<pulumi.Input<{ address: pulumi.Input<string>, name: pulumi.Input<string>, sharedWithMsParentDelegation?: pulumi.Input<boolean>, stealth?: pulumi.Input<boolean>, tsigKey?: pulumi.Input<string>, tsigKeyAlg?: pulumi.Input<string>, tsigKeyName?: pulumi.Input<string>, useTsigKeyName?: pulumi.Input<boolean> }>[]>;
    /**
     * The name of this DNS zone. For a reverse zone, this is in “address/cidr” format
     */
    readonly fqdn?: pulumi.Input<string>;
    /**
     * The grid primary servers for this zone.
     */
    readonly gridPrimaries?: pulumi.Input<pulumi.Input<{ enablePreferredPrimaries?: pulumi.Input<boolean>, gridReplicate?: pulumi.Input<boolean>, lead?: pulumi.Input<boolean>, name: pulumi.Input<string>, preferredPrimaries?: pulumi.Input<pulumi.Input<{ address: pulumi.Input<string>, name: pulumi.Input<string>, sharedWithMsParentDelegation?: pulumi.Input<boolean>, stealth?: pulumi.Input<boolean>, tsigKey?: pulumi.Input<string>, tsigKeyAlg?: pulumi.Input<string>, tsigKeyName?: pulumi.Input<string>, useTsigKeyName?: pulumi.Input<boolean> }>[]>, stealth?: pulumi.Input<boolean> }>[]>;
    /**
     * Determines if the server is duplicated with parent delegation.cannot be updated, nor written
     */
    readonly gridPrimarySharedWithMsParentDelegation?: pulumi.Input<boolean>;
    /**
     * The grid primary servers for this zone.
     */
    readonly gridSecondaries?: pulumi.Input<pulumi.Input<{ enablePreferredPrimaries?: pulumi.Input<boolean>, gridReplicate?: pulumi.Input<boolean>, lead?: pulumi.Input<boolean>, name: pulumi.Input<string>, preferredPrimaries?: pulumi.Input<pulumi.Input<{ address: pulumi.Input<string>, name: pulumi.Input<string>, sharedWithMsParentDelegation?: pulumi.Input<boolean>, stealth?: pulumi.Input<boolean>, tsigKey?: pulumi.Input<string>, tsigKeyAlg?: pulumi.Input<string>, tsigKeyName?: pulumi.Input<string>, useTsigKeyName?: pulumi.Input<boolean> }>[]>, stealth?: pulumi.Input<boolean> }>[]>;
    /**
     * If you enable this flag, other administrators cannot make conflicting changes
     */
    readonly locked?: pulumi.Input<boolean>;
    /**
     * The name of a superuser or the administrator who locked this zone (read-only)
     */
    readonly lockedBy?: pulumi.Input<string>;
    /**
     * The name of the network view in which this zone resides (read-only)
     */
    readonly networkView?: pulumi.Input<string>;
    /**
     * The name server group that serves DNS for this zone.
     */
    readonly nsGroup?: pulumi.Input<string>;
    /**
     * The RFC2317 prefix value of this DNS zone
     */
    readonly prefix?: pulumi.Input<string>;
    /**
     * Restarts the member service. The default value is False. Not readable
     */
    readonly restartIfNeeded?: pulumi.Input<boolean>;
    /**
     * The DNS scavenging settings object provides information about scavenging configuration e.g. conditions under which
     * records can be scavenged, periodicity of scavenging operations.
     */
    readonly scavengingSettings?: pulumi.Input<{[key: string]: any}>;
    /**
     * The Time to Live (TTL) value of the SOA record of this zone
     */
    readonly soaDefaultTtl?: pulumi.Input<number>;
    /**
     * This setting defines the amount of time, in seconds, after which the secondary server stops giving out answers about
     * the zone because the zone data is too old to be useful. The default is one week.
     */
    readonly soaExpire?: pulumi.Input<number>;
    /**
     * The negative Time to Live (TTL)
     */
    readonly soaNegativeTtl?: pulumi.Input<number>;
    /**
     * This indicates the interval at which a secondary server sends a message to the primary server for a zone to check
     * that its data is current, and retrieve fresh data if it is not
     */
    readonly soaRefresh?: pulumi.Input<number>;
    /**
     * This indicates how long a secondary server must wait before attempting to recontact the primary server after a
     * connection failure between the two servers occurs
     */
    readonly soaRetry?: pulumi.Input<number>;
    /**
     * The serial number in the SOA record incrementally changes every time the record is modified. The SOA serial number
     * to be used in conjunction with set_soa_serial_number (read-only)
     */
    readonly soaSerialNumber?: pulumi.Input<number>;
    /**
     * allow_transfer
     */
    readonly useAllowTransfer?: pulumi.Input<boolean>;
    /**
     * Apply policy to dynamic updates and inbound zone transfers (This value applies only if the host name restriction
     * policy is set to “Strict Hostname Checking”.)
     */
    readonly useCheckNamesPolicy?: pulumi.Input<boolean>;
    /**
     * Use flag for: copy_xfer_to_notify.
     */
    readonly useCopyXferToNotify?: pulumi.Input<boolean>;
    /**
     * This flag controls whether the zone is using an external primary.
     */
    readonly useExternalPrimary?: pulumi.Input<boolean>;
    /**
     * The name of the DNS view in which the zone resides
     */
    readonly view?: pulumi.Input<string>;
    /**
     * Determines the format of this zone - API default FORWARD
     */
    readonly zoneFormat?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ZoneAuth resource.
 */
export interface ZoneAuthArgs {
    /**
     * Determines whether dynamic DNS updates are allowed from a named ACL, or from a list of IPv4/IPv6 addresses,
     * networks, and TSIG keys for the hosts.
     */
    readonly allowTransfers?: pulumi.Input<pulumi.Input<{ _struct?: pulumi.Input<string>, address?: pulumi.Input<string>, permission?: pulumi.Input<string>, tsigKey?: pulumi.Input<string>, tsigKeyAlg?: pulumi.Input<string>, tsigKeyName?: pulumi.Input<string>, useTsigKeyName?: pulumi.Input<boolean> }>[]>;
    /**
     * Determines whether dynamic DNS updates are allowed from a named ACL, or from a list of IPv4/IPv6 addresses,
     * networks, and TSIG keys for the hosts.
     */
    readonly allowUpdates?: pulumi.Input<pulumi.Input<{ _struct?: pulumi.Input<string>, address?: pulumi.Input<string>, permission?: pulumi.Input<string>, tsigKey?: pulumi.Input<string>, tsigKeyAlg?: pulumi.Input<string>, tsigKeyName?: pulumi.Input<string>, useTsigKeyName?: pulumi.Input<boolean> }>[]>;
    /**
     * Comment for the zone; maximum 256 characters
     */
    readonly comment?: pulumi.Input<string>;
    /**
     * If this flag is set to True then copy allowed IPs from Allow Transfer to Also Notify.
     */
    readonly copyXferToNotify?: pulumi.Input<boolean>;
    /**
     * Determines whether a zone is disabled or not
     */
    readonly disable?: pulumi.Input<boolean>;
    /**
     * If this is set to True, DNS integrity check is enabled for this zone
     */
    readonly dnsIntegrityEnable?: pulumi.Input<boolean>;
    /**
     * The Grid member that performs DNS integrity checks for this zone
     */
    readonly dnsIntegrityMember?: pulumi.Input<string>;
    /**
     * The primary preference list with Grid member names and/or External Server structs for this member.
     */
    readonly externalPrimaries?: pulumi.Input<pulumi.Input<{ address: pulumi.Input<string>, name: pulumi.Input<string>, sharedWithMsParentDelegation?: pulumi.Input<boolean>, stealth?: pulumi.Input<boolean>, tsigKey?: pulumi.Input<string>, tsigKeyAlg?: pulumi.Input<string>, tsigKeyName?: pulumi.Input<string>, useTsigKeyName?: pulumi.Input<boolean> }>[]>;
    /**
     * The primary preference list with Grid member names and/or External Server structs for this member.
     */
    readonly externalSecondaries?: pulumi.Input<pulumi.Input<{ address: pulumi.Input<string>, name: pulumi.Input<string>, sharedWithMsParentDelegation?: pulumi.Input<boolean>, stealth?: pulumi.Input<boolean>, tsigKey?: pulumi.Input<string>, tsigKeyAlg?: pulumi.Input<string>, tsigKeyName?: pulumi.Input<string>, useTsigKeyName?: pulumi.Input<boolean> }>[]>;
    /**
     * The name of this DNS zone. For a reverse zone, this is in “address/cidr” format
     */
    readonly fqdn: pulumi.Input<string>;
    /**
     * The grid primary servers for this zone.
     */
    readonly gridPrimaries?: pulumi.Input<pulumi.Input<{ enablePreferredPrimaries?: pulumi.Input<boolean>, gridReplicate?: pulumi.Input<boolean>, lead?: pulumi.Input<boolean>, name: pulumi.Input<string>, preferredPrimaries?: pulumi.Input<pulumi.Input<{ address: pulumi.Input<string>, name: pulumi.Input<string>, sharedWithMsParentDelegation?: pulumi.Input<boolean>, stealth?: pulumi.Input<boolean>, tsigKey?: pulumi.Input<string>, tsigKeyAlg?: pulumi.Input<string>, tsigKeyName?: pulumi.Input<string>, useTsigKeyName?: pulumi.Input<boolean> }>[]>, stealth?: pulumi.Input<boolean> }>[]>;
    /**
     * Determines if the server is duplicated with parent delegation.cannot be updated, nor written
     */
    readonly gridPrimarySharedWithMsParentDelegation?: pulumi.Input<boolean>;
    /**
     * The grid primary servers for this zone.
     */
    readonly gridSecondaries?: pulumi.Input<pulumi.Input<{ enablePreferredPrimaries?: pulumi.Input<boolean>, gridReplicate?: pulumi.Input<boolean>, lead?: pulumi.Input<boolean>, name: pulumi.Input<string>, preferredPrimaries?: pulumi.Input<pulumi.Input<{ address: pulumi.Input<string>, name: pulumi.Input<string>, sharedWithMsParentDelegation?: pulumi.Input<boolean>, stealth?: pulumi.Input<boolean>, tsigKey?: pulumi.Input<string>, tsigKeyAlg?: pulumi.Input<string>, tsigKeyName?: pulumi.Input<string>, useTsigKeyName?: pulumi.Input<boolean> }>[]>, stealth?: pulumi.Input<boolean> }>[]>;
    /**
     * If you enable this flag, other administrators cannot make conflicting changes
     */
    readonly locked?: pulumi.Input<boolean>;
    /**
     * The name server group that serves DNS for this zone.
     */
    readonly nsGroup?: pulumi.Input<string>;
    /**
     * The RFC2317 prefix value of this DNS zone
     */
    readonly prefix?: pulumi.Input<string>;
    /**
     * Restarts the member service. The default value is False. Not readable
     */
    readonly restartIfNeeded?: pulumi.Input<boolean>;
    /**
     * The DNS scavenging settings object provides information about scavenging configuration e.g. conditions under which
     * records can be scavenged, periodicity of scavenging operations.
     */
    readonly scavengingSettings?: pulumi.Input<{[key: string]: any}>;
    /**
     * The Time to Live (TTL) value of the SOA record of this zone
     */
    readonly soaDefaultTtl?: pulumi.Input<number>;
    /**
     * This setting defines the amount of time, in seconds, after which the secondary server stops giving out answers about
     * the zone because the zone data is too old to be useful. The default is one week.
     */
    readonly soaExpire?: pulumi.Input<number>;
    /**
     * The negative Time to Live (TTL)
     */
    readonly soaNegativeTtl?: pulumi.Input<number>;
    /**
     * This indicates the interval at which a secondary server sends a message to the primary server for a zone to check
     * that its data is current, and retrieve fresh data if it is not
     */
    readonly soaRefresh?: pulumi.Input<number>;
    /**
     * This indicates how long a secondary server must wait before attempting to recontact the primary server after a
     * connection failure between the two servers occurs
     */
    readonly soaRetry?: pulumi.Input<number>;
    /**
     * The serial number in the SOA record incrementally changes every time the record is modified. The SOA serial number
     * to be used in conjunction with set_soa_serial_number (read-only)
     */
    readonly soaSerialNumber?: pulumi.Input<number>;
    /**
     * allow_transfer
     */
    readonly useAllowTransfer?: pulumi.Input<boolean>;
    /**
     * Apply policy to dynamic updates and inbound zone transfers (This value applies only if the host name restriction
     * policy is set to “Strict Hostname Checking”.)
     */
    readonly useCheckNamesPolicy?: pulumi.Input<boolean>;
    /**
     * Use flag for: copy_xfer_to_notify.
     */
    readonly useCopyXferToNotify?: pulumi.Input<boolean>;
    /**
     * This flag controls whether the zone is using an external primary.
     */
    readonly useExternalPrimary?: pulumi.Input<boolean>;
    /**
     * The name of the DNS view in which the zone resides
     */
    readonly view?: pulumi.Input<string>;
    /**
     * Determines the format of this zone - API default FORWARD
     */
    readonly zoneFormat?: pulumi.Input<string>;
}
