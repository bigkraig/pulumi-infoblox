// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package config

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
	"github.com/pulumi/pulumi/sdk/go/pulumi/config"
)

// If set, Infoblox client will permit unverifiable SSL certificates.
func GetAllowUnverifiedSsl(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "infoblox:allowUnverifiedSsl")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault(false, parseEnvBool, "INFOBLOX_ALLOW_UNVERIFIED_SSL").(bool); ok {
		return dv
	}
	return v
}

// infoblox client debug
func GetClientDebug(ctx *pulumi.Context) bool {
	v, err := config.TryBool(ctx, "infoblox:clientDebug")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault(false, parseEnvBool, "INFOBLOX_CLIENT_DEBUG").(bool); ok {
		return dv
	}
	return v
}

// Password to authenticate with Infoblox appliance
func GetPassword(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "infoblox:password")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "INFOBLOX_PASSWORD").(string); ok {
		return dv
	}
	panic(err.Error())
	return v
}

// Infoblox appliance to connect to eg https://192.168.0.1
func GetServer(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "infoblox:server")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "INFOBLOX_SERVER").(string); ok {
		return dv
	}
	panic(err.Error())
	return v
}

// http response timeout, in seconds
func GetTimeout(ctx *pulumi.Context) int {
	v, err := config.TryInt(ctx, "infoblox:timeout")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault(0, parseEnvInt, "INFOBLOX_CLIENT_TIMEOUT").(int); ok {
		return dv
	}
	return v
}

// User to authenticate with Infoblox appliance
func GetUsername(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "infoblox:username")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "INFOBLOX_USERNAME").(string); ok {
		return dv
	}
	panic(err.Error())
	return v
}

// Infoblox WAPI server version, defaults to v2.6.1
func GetWapiVersion(ctx *pulumi.Context) string {
	v, err := config.Try(ctx, "infoblox:wapiVersion")
	if err == nil {
		return v
	}
	if dv, ok := getEnvOrDefault("", nil, "INFOBLOX_WAPI_VERSION").(string); ok {
		return dv
	}
	return v
}
