// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package infoblox

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ZoneDelegated struct {
	s *pulumi.ResourceState
}

// NewZoneDelegated registers a new resource with the given unique name, arguments, and options.
func NewZoneDelegated(ctx *pulumi.Context,
	name string, args *ZoneDelegatedArgs, opts ...pulumi.ResourceOpt) (*ZoneDelegated, error) {
	if args == nil || args.DelegateTos == nil {
		return nil, errors.New("missing required argument 'DelegateTos'")
	}
	if args == nil || args.Fqdn == nil {
		return nil, errors.New("missing required argument 'Fqdn'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["comment"] = nil
		inputs["delegateTos"] = nil
		inputs["delegatedTtl"] = nil
		inputs["disable"] = nil
		inputs["fqdn"] = nil
		inputs["locked"] = nil
		inputs["nsGroup"] = nil
		inputs["useDelegatedTtl"] = nil
		inputs["view"] = nil
		inputs["zoneFormat"] = nil
	} else {
		inputs["comment"] = args.Comment
		inputs["delegateTos"] = args.DelegateTos
		inputs["delegatedTtl"] = args.DelegatedTtl
		inputs["disable"] = args.Disable
		inputs["fqdn"] = args.Fqdn
		inputs["locked"] = args.Locked
		inputs["nsGroup"] = args.NsGroup
		inputs["useDelegatedTtl"] = args.UseDelegatedTtl
		inputs["view"] = args.View
		inputs["zoneFormat"] = args.ZoneFormat
	}
	inputs["reference"] = nil
	s, err := ctx.RegisterResource("infoblox:index/zoneDelegated:ZoneDelegated", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ZoneDelegated{s: s}, nil
}

// GetZoneDelegated gets an existing ZoneDelegated resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneDelegated(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ZoneDelegatedState, opts ...pulumi.ResourceOpt) (*ZoneDelegated, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["comment"] = state.Comment
		inputs["delegateTos"] = state.DelegateTos
		inputs["delegatedTtl"] = state.DelegatedTtl
		inputs["disable"] = state.Disable
		inputs["fqdn"] = state.Fqdn
		inputs["locked"] = state.Locked
		inputs["nsGroup"] = state.NsGroup
		inputs["reference"] = state.Reference
		inputs["useDelegatedTtl"] = state.UseDelegatedTtl
		inputs["view"] = state.View
		inputs["zoneFormat"] = state.ZoneFormat
	}
	s, err := ctx.ReadResource("infoblox:index/zoneDelegated:ZoneDelegated", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ZoneDelegated{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ZoneDelegated) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ZoneDelegated) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Comment for the zone; maximum 256 characters
func (r *ZoneDelegated) Comment() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["comment"])
}

// The primary preference list with Grid member names and/or External Server structs for this member.
func (r *ZoneDelegated) DelegateTos() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["delegateTos"])
}

// a TTL for the delegated zone
func (r *ZoneDelegated) DelegatedTtl() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["delegatedTtl"])
}

// Is the zone disabled
func (r *ZoneDelegated) Disable() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["disable"])
}

// The FQDN for the zone that is being delegated
func (r *ZoneDelegated) Fqdn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fqdn"])
}

// Is the record locked to prevent changes
func (r *ZoneDelegated) Locked() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["locked"])
}

// NameServer group for this zone
func (r *ZoneDelegated) NsGroup() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nsGroup"])
}

func (r *ZoneDelegated) Reference() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["reference"])
}

// Should we use the deletated ttl
func (r *ZoneDelegated) UseDelegatedTtl() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["useDelegatedTtl"])
}

// The name of the DNS view in which the zone resides
func (r *ZoneDelegated) View() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["view"])
}

// Format of the zone, default is FORWARD
func (r *ZoneDelegated) ZoneFormat() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zoneFormat"])
}

// Input properties used for looking up and filtering ZoneDelegated resources.
type ZoneDelegatedState struct {
	// Comment for the zone; maximum 256 characters
	Comment interface{}
	// The primary preference list with Grid member names and/or External Server structs for this member.
	DelegateTos interface{}
	// a TTL for the delegated zone
	DelegatedTtl interface{}
	// Is the zone disabled
	Disable interface{}
	// The FQDN for the zone that is being delegated
	Fqdn interface{}
	// Is the record locked to prevent changes
	Locked interface{}
	// NameServer group for this zone
	NsGroup interface{}
	Reference interface{}
	// Should we use the deletated ttl
	UseDelegatedTtl interface{}
	// The name of the DNS view in which the zone resides
	View interface{}
	// Format of the zone, default is FORWARD
	ZoneFormat interface{}
}

// The set of arguments for constructing a ZoneDelegated resource.
type ZoneDelegatedArgs struct {
	// Comment for the zone; maximum 256 characters
	Comment interface{}
	// The primary preference list with Grid member names and/or External Server structs for this member.
	DelegateTos interface{}
	// a TTL for the delegated zone
	DelegatedTtl interface{}
	// Is the zone disabled
	Disable interface{}
	// The FQDN for the zone that is being delegated
	Fqdn interface{}
	// Is the record locked to prevent changes
	Locked interface{}
	// NameServer group for this zone
	NsGroup interface{}
	// Should we use the deletated ttl
	UseDelegatedTtl interface{}
	// The name of the DNS view in which the zone resides
	View interface{}
	// Format of the zone, default is FORWARD
	ZoneFormat interface{}
}
