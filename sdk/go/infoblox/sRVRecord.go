// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package infoblox

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type SRVRecord struct {
	s *pulumi.ResourceState
}

// NewSRVRecord registers a new resource with the given unique name, arguments, and options.
func NewSRVRecord(ctx *pulumi.Context,
	name string, args *SRVRecordArgs, opts ...pulumi.ResourceOpt) (*SRVRecord, error) {
	if args == nil || args.Port == nil {
		return nil, errors.New("missing required argument 'Port'")
	}
	if args == nil || args.Priority == nil {
		return nil, errors.New("missing required argument 'Priority'")
	}
	if args == nil || args.Target == nil {
		return nil, errors.New("missing required argument 'Target'")
	}
	if args == nil || args.Weight == nil {
		return nil, errors.New("missing required argument 'Weight'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["comment"] = nil
		inputs["name"] = nil
		inputs["port"] = nil
		inputs["priority"] = nil
		inputs["target"] = nil
		inputs["ttl"] = nil
		inputs["useTtl"] = nil
		inputs["view"] = nil
		inputs["weight"] = nil
	} else {
		inputs["comment"] = args.Comment
		inputs["name"] = args.Name
		inputs["port"] = args.Port
		inputs["priority"] = args.Priority
		inputs["target"] = args.Target
		inputs["ttl"] = args.Ttl
		inputs["useTtl"] = args.UseTtl
		inputs["view"] = args.View
		inputs["weight"] = args.Weight
	}
	s, err := ctx.RegisterResource("infoblox:index/sRVRecord:SRVRecord", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SRVRecord{s: s}, nil
}

// GetSRVRecord gets an existing SRVRecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetSRVRecord(ctx *pulumi.Context,
	name string, id pulumi.ID, state *SRVRecordState, opts ...pulumi.ResourceOpt) (*SRVRecord, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["comment"] = state.Comment
		inputs["name"] = state.Name
		inputs["port"] = state.Port
		inputs["priority"] = state.Priority
		inputs["target"] = state.Target
		inputs["ttl"] = state.Ttl
		inputs["useTtl"] = state.UseTtl
		inputs["view"] = state.View
		inputs["weight"] = state.Weight
	}
	s, err := ctx.ReadResource("infoblox:index/sRVRecord:SRVRecord", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &SRVRecord{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *SRVRecord) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *SRVRecord) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Comment for the record; maximum 256 characters
func (r *SRVRecord) Comment() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["comment"])
}

// The name for a SRV record in FQDN format
func (r *SRVRecord) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *SRVRecord) Port() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["port"])
}

func (r *SRVRecord) Priority() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["priority"])
}

func (r *SRVRecord) Target() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["target"])
}

// The Time To Live assigned to CNAME
func (r *SRVRecord) Ttl() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["ttl"])
}

func (r *SRVRecord) UseTtl() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["useTtl"])
}

// The name of the DNS View in which the record resides
func (r *SRVRecord) View() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["view"])
}

func (r *SRVRecord) Weight() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["weight"])
}

// Input properties used for looking up and filtering SRVRecord resources.
type SRVRecordState struct {
	// Comment for the record; maximum 256 characters
	Comment interface{}
	// The name for a SRV record in FQDN format
	Name interface{}
	Port interface{}
	Priority interface{}
	Target interface{}
	// The Time To Live assigned to CNAME
	Ttl interface{}
	UseTtl interface{}
	// The name of the DNS View in which the record resides
	View interface{}
	Weight interface{}
}

// The set of arguments for constructing a SRVRecord resource.
type SRVRecordArgs struct {
	// Comment for the record; maximum 256 characters
	Comment interface{}
	// The name for a SRV record in FQDN format
	Name interface{}
	Port interface{}
	Priority interface{}
	Target interface{}
	// The Time To Live assigned to CNAME
	Ttl interface{}
	UseTtl interface{}
	// The name of the DNS View in which the record resides
	View interface{}
	Weight interface{}
}
