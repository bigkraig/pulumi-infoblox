// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package infoblox

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type AdminUser struct {
	s *pulumi.ResourceState
}

// NewAdminUser registers a new resource with the given unique name, arguments, and options.
func NewAdminUser(ctx *pulumi.Context,
	name string, args *AdminUserArgs, opts ...pulumi.ResourceOpt) (*AdminUser, error) {
	if args == nil || args.AdminGroups == nil {
		return nil, errors.New("missing required argument 'AdminGroups'")
	}
	if args == nil || args.Password == nil {
		return nil, errors.New("missing required argument 'Password'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["adminGroups"] = nil
		inputs["comment"] = nil
		inputs["disable"] = nil
		inputs["email"] = nil
		inputs["name"] = nil
		inputs["password"] = nil
	} else {
		inputs["adminGroups"] = args.AdminGroups
		inputs["comment"] = args.Comment
		inputs["disable"] = args.Disable
		inputs["email"] = args.Email
		inputs["name"] = args.Name
		inputs["password"] = args.Password
	}
	s, err := ctx.RegisterResource("infoblox:index/adminUser:AdminUser", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AdminUser{s: s}, nil
}

// GetAdminUser gets an existing AdminUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdminUser(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AdminUserState, opts ...pulumi.ResourceOpt) (*AdminUser, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["adminGroups"] = state.AdminGroups
		inputs["comment"] = state.Comment
		inputs["disable"] = state.Disable
		inputs["email"] = state.Email
		inputs["name"] = state.Name
		inputs["password"] = state.Password
	}
	s, err := ctx.ReadResource("infoblox:index/adminUser:AdminUser", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AdminUser{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AdminUser) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AdminUser) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The admin_groups the user belongs to , there can be only 1
func (r *AdminUser) AdminGroups() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["adminGroups"])
}

// a comment on the user
func (r *AdminUser) Comment() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["comment"])
}

// Should the user be disabled
func (r *AdminUser) Disable() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["disable"])
}

// Email address for the user
func (r *AdminUser) Email() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["email"])
}

// Name for the user
func (r *AdminUser) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *AdminUser) Password() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["password"])
}

// Input properties used for looking up and filtering AdminUser resources.
type AdminUserState struct {
	// The admin_groups the user belongs to , there can be only 1
	AdminGroups interface{}
	// a comment on the user
	Comment interface{}
	// Should the user be disabled
	Disable interface{}
	// Email address for the user
	Email interface{}
	// Name for the user
	Name interface{}
	Password interface{}
}

// The set of arguments for constructing a AdminUser resource.
type AdminUserArgs struct {
	// The admin_groups the user belongs to , there can be only 1
	AdminGroups interface{}
	// a comment on the user
	Comment interface{}
	// Should the user be disabled
	Disable interface{}
	// Email address for the user
	Email interface{}
	// Name for the user
	Name interface{}
	Password interface{}
}
