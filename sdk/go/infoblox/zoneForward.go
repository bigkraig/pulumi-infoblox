// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package infoblox

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ZoneForward struct {
	s *pulumi.ResourceState
}

// NewZoneForward registers a new resource with the given unique name, arguments, and options.
func NewZoneForward(ctx *pulumi.Context,
	name string, args *ZoneForwardArgs, opts ...pulumi.ResourceOpt) (*ZoneForward, error) {
	if args == nil || args.ForwardTos == nil {
		return nil, errors.New("missing required argument 'ForwardTos'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["comment"] = nil
		inputs["disable"] = nil
		inputs["displayDomain"] = nil
		inputs["dnsFqdn"] = nil
		inputs["forwardTos"] = nil
		inputs["forwardersOnly"] = nil
		inputs["forwardingServers"] = nil
		inputs["fqdn"] = nil
		inputs["locked"] = nil
		inputs["lockedBy"] = nil
		inputs["maskPrefix"] = nil
		inputs["nsGroup"] = nil
		inputs["parent"] = nil
		inputs["prefix"] = nil
		inputs["usingSrgAssociations"] = nil
		inputs["view"] = nil
		inputs["zoneFormat"] = nil
	} else {
		inputs["comment"] = args.Comment
		inputs["disable"] = args.Disable
		inputs["displayDomain"] = args.DisplayDomain
		inputs["dnsFqdn"] = args.DnsFqdn
		inputs["forwardTos"] = args.ForwardTos
		inputs["forwardersOnly"] = args.ForwardersOnly
		inputs["forwardingServers"] = args.ForwardingServers
		inputs["fqdn"] = args.Fqdn
		inputs["locked"] = args.Locked
		inputs["lockedBy"] = args.LockedBy
		inputs["maskPrefix"] = args.MaskPrefix
		inputs["nsGroup"] = args.NsGroup
		inputs["parent"] = args.Parent
		inputs["prefix"] = args.Prefix
		inputs["usingSrgAssociations"] = args.UsingSrgAssociations
		inputs["view"] = args.View
		inputs["zoneFormat"] = args.ZoneFormat
	}
	inputs["address"] = nil
	s, err := ctx.RegisterResource("infoblox:index/zoneForward:ZoneForward", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ZoneForward{s: s}, nil
}

// GetZoneForward gets an existing ZoneForward resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetZoneForward(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ZoneForwardState, opts ...pulumi.ResourceOpt) (*ZoneForward, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["address"] = state.Address
		inputs["comment"] = state.Comment
		inputs["disable"] = state.Disable
		inputs["displayDomain"] = state.DisplayDomain
		inputs["dnsFqdn"] = state.DnsFqdn
		inputs["forwardTos"] = state.ForwardTos
		inputs["forwardersOnly"] = state.ForwardersOnly
		inputs["forwardingServers"] = state.ForwardingServers
		inputs["fqdn"] = state.Fqdn
		inputs["locked"] = state.Locked
		inputs["lockedBy"] = state.LockedBy
		inputs["maskPrefix"] = state.MaskPrefix
		inputs["nsGroup"] = state.NsGroup
		inputs["parent"] = state.Parent
		inputs["prefix"] = state.Prefix
		inputs["usingSrgAssociations"] = state.UsingSrgAssociations
		inputs["view"] = state.View
		inputs["zoneFormat"] = state.ZoneFormat
	}
	s, err := ctx.ReadResource("infoblox:index/zoneForward:ZoneForward", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &ZoneForward{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *ZoneForward) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *ZoneForward) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The IPv4 Address or IPv6 Address of the server that is serving this zone. Not writable
func (r *ZoneForward) Address() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["address"])
}

// Comment for the zone; maximum 256 characters
func (r *ZoneForward) Comment() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["comment"])
}

// Determines whether a zone is disabled or not
func (r *ZoneForward) Disable() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["disable"])
}

// The displayed name of the DNS zone.Not writable
func (r *ZoneForward) DisplayDomain() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["displayDomain"])
}

// The name of this DNS zone in punycode format.For a reverse zone, this is in “address/cidr” format.For other zones,
// this is in FQDN format in punycode format.Cannot be updated
func (r *ZoneForward) DnsFqdn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dnsFqdn"])
}

// The primary preference list with Grid member names and/or External Server structs for this member.
func (r *ZoneForward) ForwardTos() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["forwardTos"])
}

// Determines if the appliance sends queries to forwarders only and not to other internal or Internet root servers
func (r *ZoneForward) ForwardersOnly() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["forwardersOnly"])
}

// The primary preference list with Grid member names and/or External Server structs for this member.
func (r *ZoneForward) ForwardingServers() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["forwardingServers"])
}

// The name of this DNS zone. For a reverse zone, this is in “address/cidr” format
func (r *ZoneForward) Fqdn() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["fqdn"])
}

// If you enable this flag, other administrators cannot make conflicting changes. This is for administration purposes only.
// The zone will continue to serve DNS data even when it is locked.The default value is False.
func (r *ZoneForward) Locked() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["locked"])
}

// The name of a superuser or the administrator who locked this zone.Not writable
func (r *ZoneForward) LockedBy() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["lockedBy"])
}

// IPv4 Netmask or IPv6 prefix for this zone.Not Writable
func (r *ZoneForward) MaskPrefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["maskPrefix"])
}

// A forwarding member name server group. Values with leading or trailing white space are not valid for this field. The
// default value is undefined.
func (r *ZoneForward) NsGroup() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["nsGroup"])
}

// The parent zone of this zone. Note that when searching for reverse zones, the “in-addr.arpa” notation should be
// used. Not writable.
func (r *ZoneForward) Parent() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["parent"])
}

// The RFC2317 prefix value of this DNS zone.
func (r *ZoneForward) Prefix() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["prefix"])
}

// This is true if the zone is associated with a shared record group. Not writable
func (r *ZoneForward) UsingSrgAssociations() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["usingSrgAssociations"])
}

// The name of the DNS view in which the zone resides
func (r *ZoneForward) View() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["view"])
}

// Determines the format of this zone - API default FORWARD. Cannot be updated.
func (r *ZoneForward) ZoneFormat() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zoneFormat"])
}

// Input properties used for looking up and filtering ZoneForward resources.
type ZoneForwardState struct {
	// The IPv4 Address or IPv6 Address of the server that is serving this zone. Not writable
	Address interface{}
	// Comment for the zone; maximum 256 characters
	Comment interface{}
	// Determines whether a zone is disabled or not
	Disable interface{}
	// The displayed name of the DNS zone.Not writable
	DisplayDomain interface{}
	// The name of this DNS zone in punycode format.For a reverse zone, this is in “address/cidr” format.For other zones,
	// this is in FQDN format in punycode format.Cannot be updated
	DnsFqdn interface{}
	// The primary preference list with Grid member names and/or External Server structs for this member.
	ForwardTos interface{}
	// Determines if the appliance sends queries to forwarders only and not to other internal or Internet root servers
	ForwardersOnly interface{}
	// The primary preference list with Grid member names and/or External Server structs for this member.
	ForwardingServers interface{}
	// The name of this DNS zone. For a reverse zone, this is in “address/cidr” format
	Fqdn interface{}
	// If you enable this flag, other administrators cannot make conflicting changes. This is for administration purposes
	// only. The zone will continue to serve DNS data even when it is locked.The default value is False.
	Locked interface{}
	// The name of a superuser or the administrator who locked this zone.Not writable
	LockedBy interface{}
	// IPv4 Netmask or IPv6 prefix for this zone.Not Writable
	MaskPrefix interface{}
	// A forwarding member name server group. Values with leading or trailing white space are not valid for this field. The
	// default value is undefined.
	NsGroup interface{}
	// The parent zone of this zone. Note that when searching for reverse zones, the “in-addr.arpa” notation should be
	// used. Not writable.
	Parent interface{}
	// The RFC2317 prefix value of this DNS zone.
	Prefix interface{}
	// This is true if the zone is associated with a shared record group. Not writable
	UsingSrgAssociations interface{}
	// The name of the DNS view in which the zone resides
	View interface{}
	// Determines the format of this zone - API default FORWARD. Cannot be updated.
	ZoneFormat interface{}
}

// The set of arguments for constructing a ZoneForward resource.
type ZoneForwardArgs struct {
	// Comment for the zone; maximum 256 characters
	Comment interface{}
	// Determines whether a zone is disabled or not
	Disable interface{}
	// The displayed name of the DNS zone.Not writable
	DisplayDomain interface{}
	// The name of this DNS zone in punycode format.For a reverse zone, this is in “address/cidr” format.For other zones,
	// this is in FQDN format in punycode format.Cannot be updated
	DnsFqdn interface{}
	// The primary preference list with Grid member names and/or External Server structs for this member.
	ForwardTos interface{}
	// Determines if the appliance sends queries to forwarders only and not to other internal or Internet root servers
	ForwardersOnly interface{}
	// The primary preference list with Grid member names and/or External Server structs for this member.
	ForwardingServers interface{}
	// The name of this DNS zone. For a reverse zone, this is in “address/cidr” format
	Fqdn interface{}
	// If you enable this flag, other administrators cannot make conflicting changes. This is for administration purposes
	// only. The zone will continue to serve DNS data even when it is locked.The default value is False.
	Locked interface{}
	// The name of a superuser or the administrator who locked this zone.Not writable
	LockedBy interface{}
	// IPv4 Netmask or IPv6 prefix for this zone.Not Writable
	MaskPrefix interface{}
	// A forwarding member name server group. Values with leading or trailing white space are not valid for this field. The
	// default value is undefined.
	NsGroup interface{}
	// The parent zone of this zone. Note that when searching for reverse zones, the “in-addr.arpa” notation should be
	// used. Not writable.
	Parent interface{}
	// The RFC2317 prefix value of this DNS zone.
	Prefix interface{}
	// This is true if the zone is associated with a shared record group. Not writable
	UsingSrgAssociations interface{}
	// The name of the DNS view in which the zone resides
	View interface{}
	// Determines the format of this zone - API default FORWARD. Cannot be updated.
	ZoneFormat interface{}
}
