// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package infoblox

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Network struct {
	s *pulumi.ResourceState
}

// NewNetwork registers a new resource with the given unique name, arguments, and options.
func NewNetwork(ctx *pulumi.Context,
	name string, args *NetworkArgs, opts ...pulumi.ResourceOpt) (*Network, error) {
	if args == nil || args.Network == nil {
		return nil, errors.New("missing required argument 'Network'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["authority"] = nil
		inputs["autoCreateReversezone"] = nil
		inputs["comment"] = nil
		inputs["disable"] = nil
		inputs["discoveryMember"] = nil
		inputs["enableDdns"] = nil
		inputs["enableDhcpThresholds"] = nil
		inputs["enableDiscovery"] = nil
		inputs["highWaterMark"] = nil
		inputs["highWaterMarkReset"] = nil
		inputs["ipv4addr"] = nil
		inputs["leaseScavengeTime"] = nil
		inputs["lowWaterMark"] = nil
		inputs["lowWaterMarkReset"] = nil
		inputs["members"] = nil
		inputs["netmask"] = nil
		inputs["network"] = nil
		inputs["networkContainer"] = nil
		inputs["networkView"] = nil
		inputs["options"] = nil
		inputs["recycleLeases"] = nil
		inputs["restartIfNeeded"] = nil
		inputs["updateDnsOnLeaseRenewal"] = nil
		inputs["useAuthority"] = nil
		inputs["useEnableDdns"] = nil
		inputs["useEnableDhcpThresholds"] = nil
		inputs["useEnableDiscovery"] = nil
		inputs["useOptions"] = nil
		inputs["useRecycleLeases"] = nil
	} else {
		inputs["authority"] = args.Authority
		inputs["autoCreateReversezone"] = args.AutoCreateReversezone
		inputs["comment"] = args.Comment
		inputs["disable"] = args.Disable
		inputs["discoveryMember"] = args.DiscoveryMember
		inputs["enableDdns"] = args.EnableDdns
		inputs["enableDhcpThresholds"] = args.EnableDhcpThresholds
		inputs["enableDiscovery"] = args.EnableDiscovery
		inputs["highWaterMark"] = args.HighWaterMark
		inputs["highWaterMarkReset"] = args.HighWaterMarkReset
		inputs["ipv4addr"] = args.Ipv4addr
		inputs["leaseScavengeTime"] = args.LeaseScavengeTime
		inputs["lowWaterMark"] = args.LowWaterMark
		inputs["lowWaterMarkReset"] = args.LowWaterMarkReset
		inputs["members"] = args.Members
		inputs["netmask"] = args.Netmask
		inputs["network"] = args.Network
		inputs["networkContainer"] = args.NetworkContainer
		inputs["networkView"] = args.NetworkView
		inputs["options"] = args.Options
		inputs["recycleLeases"] = args.RecycleLeases
		inputs["restartIfNeeded"] = args.RestartIfNeeded
		inputs["updateDnsOnLeaseRenewal"] = args.UpdateDnsOnLeaseRenewal
		inputs["useAuthority"] = args.UseAuthority
		inputs["useEnableDdns"] = args.UseEnableDdns
		inputs["useEnableDhcpThresholds"] = args.UseEnableDhcpThresholds
		inputs["useEnableDiscovery"] = args.UseEnableDiscovery
		inputs["useOptions"] = args.UseOptions
		inputs["useRecycleLeases"] = args.UseRecycleLeases
	}
	s, err := ctx.RegisterResource("infoblox:index/network:Network", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Network{s: s}, nil
}

// GetNetwork gets an existing Network resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetwork(ctx *pulumi.Context,
	name string, id pulumi.ID, state *NetworkState, opts ...pulumi.ResourceOpt) (*Network, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["authority"] = state.Authority
		inputs["autoCreateReversezone"] = state.AutoCreateReversezone
		inputs["comment"] = state.Comment
		inputs["disable"] = state.Disable
		inputs["discoveryMember"] = state.DiscoveryMember
		inputs["enableDdns"] = state.EnableDdns
		inputs["enableDhcpThresholds"] = state.EnableDhcpThresholds
		inputs["enableDiscovery"] = state.EnableDiscovery
		inputs["highWaterMark"] = state.HighWaterMark
		inputs["highWaterMarkReset"] = state.HighWaterMarkReset
		inputs["ipv4addr"] = state.Ipv4addr
		inputs["leaseScavengeTime"] = state.LeaseScavengeTime
		inputs["lowWaterMark"] = state.LowWaterMark
		inputs["lowWaterMarkReset"] = state.LowWaterMarkReset
		inputs["members"] = state.Members
		inputs["netmask"] = state.Netmask
		inputs["network"] = state.Network
		inputs["networkContainer"] = state.NetworkContainer
		inputs["networkView"] = state.NetworkView
		inputs["options"] = state.Options
		inputs["recycleLeases"] = state.RecycleLeases
		inputs["restartIfNeeded"] = state.RestartIfNeeded
		inputs["updateDnsOnLeaseRenewal"] = state.UpdateDnsOnLeaseRenewal
		inputs["useAuthority"] = state.UseAuthority
		inputs["useEnableDdns"] = state.UseEnableDdns
		inputs["useEnableDhcpThresholds"] = state.UseEnableDhcpThresholds
		inputs["useEnableDiscovery"] = state.UseEnableDiscovery
		inputs["useOptions"] = state.UseOptions
		inputs["useRecycleLeases"] = state.UseRecycleLeases
	}
	s, err := ctx.ReadResource("infoblox:index/network:Network", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Network{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Network) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Network) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Authority for the DHCP network. Associated with the field use_authority
func (r *Network) Authority() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["authority"])
}

// This flag controls whether reverse zones are automatically created when the network is added. Cannot be updated, nor is
// readable
func (r *Network) AutoCreateReversezone() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["autoCreateReversezone"])
}

// Comment for the network, maximum 256 characters.
func (r *Network) Comment() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["comment"])
}

// Determines whether a network is disabled or not. When this is set to False, the network is enabled.
func (r *Network) Disable() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["disable"])
}

// The member that will run discovery for this network.
func (r *Network) DiscoveryMember() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["discoveryMember"])
}

// The dynamic DNS updates flag of a DHCP network object. If set to True, the DHCP server sends DDNS updates to DNS servers
// in the same Grid, and to external DNS servers.
func (r *Network) EnableDdns() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableDdns"])
}

// Determines if DHCP thresholds are enabled for the network.
func (r *Network) EnableDhcpThresholds() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableDhcpThresholds"])
}

// Determines whether a discovery is enabled or not for this network. When this is set to False, the network discovery is
// disabled.
func (r *Network) EnableDiscovery() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["enableDiscovery"])
}

// The percentage of DHCP network usage threshold above which network usage is not expected and may warrant your attention.
// When the high watermark is reached, the Infoblox appliance generates a syslog message and sends a warning (if enabled).
// A number that specifies the percentage of allocated addresses. The range is from 1 to 100.
func (r *Network) HighWaterMark() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["highWaterMark"])
}

// The percentage of DHCP network usage below which the corresponding SNMP trap is reset. A number that specifies the
// percentage of allocated addresses. The range is from 1 to 100. The high watermark reset value must be lower than the
// high watermark value.
func (r *Network) HighWaterMarkReset() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["highWaterMarkReset"])
}

// The IPv4 Address of the network.
func (r *Network) Ipv4addr() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipv4addr"])
}

// An integer that specifies the period of time (in seconds) that frees and backs up leases remained in the database before
// they are automatically deleted. To disable lease scavenging, set the parameter to -1. The minimum positive value must be
// greater than 86400 seconds (1 day).
func (r *Network) LeaseScavengeTime() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["leaseScavengeTime"])
}

// The percentage of DHCP network usage below which the Infoblox appliance generates a syslog message and sends a warning
// (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100.
func (r *Network) LowWaterMark() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["lowWaterMark"])
}

// The percentage of DHCP network usage threshold below which network usage is not expected and may warrant your attention.
// When the low watermark is crossed, the Infoblox appliance generates a syslog message and sends a warning (if enabled). A
// number that specifies the percentage of allocated addresses. The range is from 1 to 100. The low watermark reset value
// must be higher than the low watermark value.
func (r *Network) LowWaterMarkReset() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["lowWaterMarkReset"])
}

// DHCP Member which is going to serve this network.
func (r *Network) Members() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["members"])
}

// Number of bits in the network mask example: 8,16,24 etc
func (r *Network) Netmask() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["netmask"])
}

// The network address in IPv4 Address/CIDR format.
func (r *Network) Network() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["network"])
}

// The network container to which this network belongs (if any). Cannot be updated nor written
func (r *Network) NetworkContainer() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["networkContainer"])
}

// The name of the network view in which this network resides.
func (r *Network) NetworkView() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["networkView"])
}

// DHCP Related] Options such as DNS servers, gateway, ntp, etc
func (r *Network) Options() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["options"])
}

// If the field is set to True, the leases are kept in the Recycle Bin until one week after expiration. Otherwise, the
// leases are permanently deleted.
func (r *Network) RecycleLeases() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["recycleLeases"])
}

// Restarts the member service. Not readable
func (r *Network) RestartIfNeeded() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["restartIfNeeded"])
}

// This field controls whether the DHCP server updates DNS when a DHCP lease is renewed.
func (r *Network) UpdateDnsOnLeaseRenewal() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["updateDnsOnLeaseRenewal"])
}

func (r *Network) UseAuthority() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["useAuthority"])
}

func (r *Network) UseEnableDdns() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["useEnableDdns"])
}

func (r *Network) UseEnableDhcpThresholds() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["useEnableDhcpThresholds"])
}

func (r *Network) UseEnableDiscovery() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["useEnableDiscovery"])
}

func (r *Network) UseOptions() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["useOptions"])
}

func (r *Network) UseRecycleLeases() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["useRecycleLeases"])
}

// Input properties used for looking up and filtering Network resources.
type NetworkState struct {
	// Authority for the DHCP network. Associated with the field use_authority
	Authority interface{}
	// This flag controls whether reverse zones are automatically created when the network is added. Cannot be updated, nor is
	// readable
	AutoCreateReversezone interface{}
	// Comment for the network, maximum 256 characters.
	Comment interface{}
	// Determines whether a network is disabled or not. When this is set to False, the network is enabled.
	Disable interface{}
	// The member that will run discovery for this network.
	DiscoveryMember interface{}
	// The dynamic DNS updates flag of a DHCP network object. If set to True, the DHCP server sends DDNS updates to DNS
	// servers in the same Grid, and to external DNS servers.
	EnableDdns interface{}
	// Determines if DHCP thresholds are enabled for the network.
	EnableDhcpThresholds interface{}
	// Determines whether a discovery is enabled or not for this network. When this is set to False, the network discovery is
	// disabled.
	EnableDiscovery interface{}
	// The percentage of DHCP network usage threshold above which network usage is not expected and may warrant your
	// attention. When the high watermark is reached, the Infoblox appliance generates a syslog message and sends a warning
	// (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100.
	HighWaterMark interface{}
	// The percentage of DHCP network usage below which the corresponding SNMP trap is reset. A number that specifies the
	// percentage of allocated addresses. The range is from 1 to 100. The high watermark reset value must be lower than the
	// high watermark value.
	HighWaterMarkReset interface{}
	// The IPv4 Address of the network.
	Ipv4addr interface{}
	// An integer that specifies the period of time (in seconds) that frees and backs up leases remained in the database
	// before they are automatically deleted. To disable lease scavenging, set the parameter to -1. The minimum positive value
	// must be greater than 86400 seconds (1 day).
	LeaseScavengeTime interface{}
	// The percentage of DHCP network usage below which the Infoblox appliance generates a syslog message and sends a warning
	// (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100.
	LowWaterMark interface{}
	// The percentage of DHCP network usage threshold below which network usage is not expected and may warrant your
	// attention. When the low watermark is crossed, the Infoblox appliance generates a syslog message and sends a warning (if
	// enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The low watermark
	// reset value must be higher than the low watermark value.
	LowWaterMarkReset interface{}
	// DHCP Member which is going to serve this network.
	Members interface{}
	// Number of bits in the network mask example: 8,16,24 etc
	Netmask interface{}
	// The network address in IPv4 Address/CIDR format.
	Network interface{}
	// The network container to which this network belongs (if any). Cannot be updated nor written
	NetworkContainer interface{}
	// The name of the network view in which this network resides.
	NetworkView interface{}
	// DHCP Related] Options such as DNS servers, gateway, ntp, etc
	Options interface{}
	// If the field is set to True, the leases are kept in the Recycle Bin until one week after expiration. Otherwise, the
	// leases are permanently deleted.
	RecycleLeases interface{}
	// Restarts the member service. Not readable
	RestartIfNeeded interface{}
	// This field controls whether the DHCP server updates DNS when a DHCP lease is renewed.
	UpdateDnsOnLeaseRenewal interface{}
	UseAuthority interface{}
	UseEnableDdns interface{}
	UseEnableDhcpThresholds interface{}
	UseEnableDiscovery interface{}
	UseOptions interface{}
	UseRecycleLeases interface{}
}

// The set of arguments for constructing a Network resource.
type NetworkArgs struct {
	// Authority for the DHCP network. Associated with the field use_authority
	Authority interface{}
	// This flag controls whether reverse zones are automatically created when the network is added. Cannot be updated, nor is
	// readable
	AutoCreateReversezone interface{}
	// Comment for the network, maximum 256 characters.
	Comment interface{}
	// Determines whether a network is disabled or not. When this is set to False, the network is enabled.
	Disable interface{}
	// The member that will run discovery for this network.
	DiscoveryMember interface{}
	// The dynamic DNS updates flag of a DHCP network object. If set to True, the DHCP server sends DDNS updates to DNS
	// servers in the same Grid, and to external DNS servers.
	EnableDdns interface{}
	// Determines if DHCP thresholds are enabled for the network.
	EnableDhcpThresholds interface{}
	// Determines whether a discovery is enabled or not for this network. When this is set to False, the network discovery is
	// disabled.
	EnableDiscovery interface{}
	// The percentage of DHCP network usage threshold above which network usage is not expected and may warrant your
	// attention. When the high watermark is reached, the Infoblox appliance generates a syslog message and sends a warning
	// (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100.
	HighWaterMark interface{}
	// The percentage of DHCP network usage below which the corresponding SNMP trap is reset. A number that specifies the
	// percentage of allocated addresses. The range is from 1 to 100. The high watermark reset value must be lower than the
	// high watermark value.
	HighWaterMarkReset interface{}
	// The IPv4 Address of the network.
	Ipv4addr interface{}
	// An integer that specifies the period of time (in seconds) that frees and backs up leases remained in the database
	// before they are automatically deleted. To disable lease scavenging, set the parameter to -1. The minimum positive value
	// must be greater than 86400 seconds (1 day).
	LeaseScavengeTime interface{}
	// The percentage of DHCP network usage below which the Infoblox appliance generates a syslog message and sends a warning
	// (if enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100.
	LowWaterMark interface{}
	// The percentage of DHCP network usage threshold below which network usage is not expected and may warrant your
	// attention. When the low watermark is crossed, the Infoblox appliance generates a syslog message and sends a warning (if
	// enabled). A number that specifies the percentage of allocated addresses. The range is from 1 to 100. The low watermark
	// reset value must be higher than the low watermark value.
	LowWaterMarkReset interface{}
	// DHCP Member which is going to serve this network.
	Members interface{}
	// Number of bits in the network mask example: 8,16,24 etc
	Netmask interface{}
	// The network address in IPv4 Address/CIDR format.
	Network interface{}
	// The network container to which this network belongs (if any). Cannot be updated nor written
	NetworkContainer interface{}
	// The name of the network view in which this network resides.
	NetworkView interface{}
	// DHCP Related] Options such as DNS servers, gateway, ntp, etc
	Options interface{}
	// If the field is set to True, the leases are kept in the Recycle Bin until one week after expiration. Otherwise, the
	// leases are permanently deleted.
	RecycleLeases interface{}
	// Restarts the member service. Not readable
	RestartIfNeeded interface{}
	// This field controls whether the DHCP server updates DNS when a DHCP lease is renewed.
	UpdateDnsOnLeaseRenewal interface{}
	UseAuthority interface{}
	UseEnableDdns interface{}
	UseEnableDhcpThresholds interface{}
	UseEnableDiscovery interface{}
	UseOptions interface{}
	UseRecycleLeases interface{}
}
