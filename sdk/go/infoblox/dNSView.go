// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package infoblox

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type DNSView struct {
	s *pulumi.ResourceState
}

// NewDNSView registers a new resource with the given unique name, arguments, and options.
func NewDNSView(ctx *pulumi.Context,
	name string, args *DNSViewArgs, opts ...pulumi.ResourceOpt) (*DNSView, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["comment"] = nil
		inputs["name"] = nil
	} else {
		inputs["comment"] = args.Comment
		inputs["name"] = args.Name
	}
	inputs["isDefault"] = nil
	s, err := ctx.RegisterResource("infoblox:index/dNSView:DNSView", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DNSView{s: s}, nil
}

// GetDNSView gets an existing DNSView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDNSView(ctx *pulumi.Context,
	name string, id pulumi.ID, state *DNSViewState, opts ...pulumi.ResourceOpt) (*DNSView, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["comment"] = state.Comment
		inputs["isDefault"] = state.IsDefault
		inputs["name"] = state.Name
	}
	s, err := ctx.ReadResource("infoblox:index/dNSView:DNSView", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &DNSView{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *DNSView) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *DNSView) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Comment for the DNS view; maximum 64 characters.
func (r *DNSView) Comment() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["comment"])
}

// The NIOS appliance provides one default DNS view. You can rename the default view and change its settings, but you
// cannot delete it. There must always be at least one DNS view in the appliance.
func (r *DNSView) IsDefault() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["isDefault"])
}

// Name of the DNS view.
func (r *DNSView) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Input properties used for looking up and filtering DNSView resources.
type DNSViewState struct {
	// Comment for the DNS view; maximum 64 characters.
	Comment interface{}
	// The NIOS appliance provides one default DNS view. You can rename the default view and change its settings, but you
	// cannot delete it. There must always be at least one DNS view in the appliance.
	IsDefault interface{}
	// Name of the DNS view.
	Name interface{}
}

// The set of arguments for constructing a DNSView resource.
type DNSViewArgs struct {
	// Comment for the DNS view; maximum 64 characters.
	Comment interface{}
	// Name of the DNS view.
	Name interface{}
}
