// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package infoblox

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type Permission struct {
	s *pulumi.ResourceState
}

// NewPermission registers a new resource with the given unique name, arguments, and options.
func NewPermission(ctx *pulumi.Context,
	name string, args *PermissionArgs, opts ...pulumi.ResourceOpt) (*Permission, error) {
	if args == nil || args.Permission == nil {
		return nil, errors.New("missing required argument 'Permission'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["group"] = nil
		inputs["object"] = nil
		inputs["permission"] = nil
		inputs["resourceType"] = nil
		inputs["role"] = nil
	} else {
		inputs["group"] = args.Group
		inputs["object"] = args.Object
		inputs["permission"] = args.Permission
		inputs["resourceType"] = args.ResourceType
		inputs["role"] = args.Role
	}
	s, err := ctx.RegisterResource("infoblox:index/permission:Permission", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Permission{s: s}, nil
}

// GetPermission gets an existing Permission resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPermission(ctx *pulumi.Context,
	name string, id pulumi.ID, state *PermissionState, opts ...pulumi.ResourceOpt) (*Permission, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["group"] = state.Group
		inputs["object"] = state.Object
		inputs["permission"] = state.Permission
		inputs["resourceType"] = state.ResourceType
		inputs["role"] = state.Role
	}
	s, err := ctx.ReadResource("infoblox:index/permission:Permission", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Permission{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Permission) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Permission) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// The name of the admin group this permission applies to.
func (r *Permission) Group() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["group"])
}

// A reference to a WAPI object, which will be the object this permission applies to.
func (r *Permission) Object() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["object"])
}

// The type of permission.
func (r *Permission) Permission() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["permission"])
}

// The type of resource this permission applies to.
func (r *Permission) ResourceType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["resourceType"])
}

// The name of the role this permission applies to.
func (r *Permission) Role() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["role"])
}

// Input properties used for looking up and filtering Permission resources.
type PermissionState struct {
	// The name of the admin group this permission applies to.
	Group interface{}
	// A reference to a WAPI object, which will be the object this permission applies to.
	Object interface{}
	// The type of permission.
	Permission interface{}
	// The type of resource this permission applies to.
	ResourceType interface{}
	// The name of the role this permission applies to.
	Role interface{}
}

// The set of arguments for constructing a Permission resource.
type PermissionArgs struct {
	// The name of the admin group this permission applies to.
	Group interface{}
	// A reference to a WAPI object, which will be the object this permission applies to.
	Object interface{}
	// The type of permission.
	Permission interface{}
	// The type of resource this permission applies to.
	ResourceType interface{}
	// The name of the role this permission applies to.
	Role interface{}
}
