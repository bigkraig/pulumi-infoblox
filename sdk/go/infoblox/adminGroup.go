// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package infoblox

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type AdminGroup struct {
	s *pulumi.ResourceState
}

// NewAdminGroup registers a new resource with the given unique name, arguments, and options.
func NewAdminGroup(ctx *pulumi.Context,
	name string, args *AdminGroupArgs, opts ...pulumi.ResourceOpt) (*AdminGroup, error) {
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["accessMethods"] = nil
		inputs["comment"] = nil
		inputs["disable"] = nil
		inputs["emailAddresses"] = nil
		inputs["name"] = nil
		inputs["roles"] = nil
		inputs["superuser"] = nil
	} else {
		inputs["accessMethods"] = args.AccessMethods
		inputs["comment"] = args.Comment
		inputs["disable"] = args.Disable
		inputs["emailAddresses"] = args.EmailAddresses
		inputs["name"] = args.Name
		inputs["roles"] = args.Roles
		inputs["superuser"] = args.Superuser
	}
	s, err := ctx.RegisterResource("infoblox:index/adminGroup:AdminGroup", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AdminGroup{s: s}, nil
}

// GetAdminGroup gets an existing AdminGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdminGroup(ctx *pulumi.Context,
	name string, id pulumi.ID, state *AdminGroupState, opts ...pulumi.ResourceOpt) (*AdminGroup, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["accessMethods"] = state.AccessMethods
		inputs["comment"] = state.Comment
		inputs["disable"] = state.Disable
		inputs["emailAddresses"] = state.EmailAddresses
		inputs["name"] = state.Name
		inputs["roles"] = state.Roles
		inputs["superuser"] = state.Superuser
	}
	s, err := ctx.ReadResource("infoblox:index/adminGroup:AdminGroup", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &AdminGroup{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *AdminGroup) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *AdminGroup) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Methods the group can use to access Infoblox
func (r *AdminGroup) AccessMethods() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["accessMethods"])
}

// Comment field
func (r *AdminGroup) Comment() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["comment"])
}

// Whether the Admin Group is disabled or not
func (r *AdminGroup) Disable() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["disable"])
}

// List of email addresses to associated with the Admin Group
func (r *AdminGroup) EmailAddresses() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["emailAddresses"])
}

// The name of the Admin Group
func (r *AdminGroup) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// List of roles to associated with the Admin Group
func (r *AdminGroup) Roles() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["roles"])
}

// Whether the group is a super user group or not
func (r *AdminGroup) Superuser() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["superuser"])
}

// Input properties used for looking up and filtering AdminGroup resources.
type AdminGroupState struct {
	// Methods the group can use to access Infoblox
	AccessMethods interface{}
	// Comment field
	Comment interface{}
	// Whether the Admin Group is disabled or not
	Disable interface{}
	// List of email addresses to associated with the Admin Group
	EmailAddresses interface{}
	// The name of the Admin Group
	Name interface{}
	// List of roles to associated with the Admin Group
	Roles interface{}
	// Whether the group is a super user group or not
	Superuser interface{}
}

// The set of arguments for constructing a AdminGroup resource.
type AdminGroupArgs struct {
	// Methods the group can use to access Infoblox
	AccessMethods interface{}
	// Comment field
	Comment interface{}
	// Whether the Admin Group is disabled or not
	Disable interface{}
	// List of email addresses to associated with the Admin Group
	EmailAddresses interface{}
	// The name of the Admin Group
	Name interface{}
	// List of roles to associated with the Admin Group
	Roles interface{}
	// Whether the group is a super user group or not
	Superuser interface{}
}
