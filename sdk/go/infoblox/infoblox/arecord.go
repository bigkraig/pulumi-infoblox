// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package infoblox

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type arecord struct {
	s *pulumi.ResourceState
}

// Newarecord registers a new resource with the given unique name, arguments, and options.
func Newarecord(ctx *pulumi.Context,
	name string, args *arecordArgs, opts ...pulumi.ResourceOpt) (*arecord, error) {
	if args == nil || args.Ipv4addr == nil {
		return nil, errors.New("missing required argument 'Ipv4addr'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["comment"] = nil
		inputs["creator"] = nil
		inputs["ddnsPrincipal"] = nil
		inputs["ddnsProtected"] = nil
		inputs["disable"] = nil
		inputs["dnsName"] = nil
		inputs["forbidReclamation"] = nil
		inputs["ipv4addr"] = nil
		inputs["name"] = nil
		inputs["reclaimable"] = nil
		inputs["sharedRecordGroup"] = nil
		inputs["ttl"] = nil
		inputs["useTtl"] = nil
		inputs["view"] = nil
	} else {
		inputs["comment"] = args.Comment
		inputs["creator"] = args.Creator
		inputs["ddnsPrincipal"] = args.DdnsPrincipal
		inputs["ddnsProtected"] = args.DdnsProtected
		inputs["disable"] = args.Disable
		inputs["dnsName"] = args.DnsName
		inputs["forbidReclamation"] = args.ForbidReclamation
		inputs["ipv4addr"] = args.Ipv4addr
		inputs["name"] = args.Name
		inputs["reclaimable"] = args.Reclaimable
		inputs["sharedRecordGroup"] = args.SharedRecordGroup
		inputs["ttl"] = args.Ttl
		inputs["useTtl"] = args.UseTtl
		inputs["view"] = args.View
	}
	inputs["creationTime"] = nil
	inputs["zone"] = nil
	s, err := ctx.RegisterResource("infoblox:infoblox/arecord:arecord", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &arecord{s: s}, nil
}

// Getarecord gets an existing arecord resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func Getarecord(ctx *pulumi.Context,
	name string, id pulumi.ID, state *arecordState, opts ...pulumi.ResourceOpt) (*arecord, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["comment"] = state.Comment
		inputs["creationTime"] = state.CreationTime
		inputs["creator"] = state.Creator
		inputs["ddnsPrincipal"] = state.DdnsPrincipal
		inputs["ddnsProtected"] = state.DdnsProtected
		inputs["disable"] = state.Disable
		inputs["dnsName"] = state.DnsName
		inputs["forbidReclamation"] = state.ForbidReclamation
		inputs["ipv4addr"] = state.Ipv4addr
		inputs["name"] = state.Name
		inputs["reclaimable"] = state.Reclaimable
		inputs["sharedRecordGroup"] = state.SharedRecordGroup
		inputs["ttl"] = state.Ttl
		inputs["useTtl"] = state.UseTtl
		inputs["view"] = state.View
		inputs["zone"] = state.Zone
	}
	s, err := ctx.ReadResource("infoblox:infoblox/arecord:arecord", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &arecord{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *arecord) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *arecord) ID() *pulumi.IDOutput {
	return r.s.ID()
}

// Comment for the record; maximum 256 characters
func (r *arecord) Comment() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["comment"])
}

// The time of the record creation in Epoch seconds format.
func (r *arecord) CreationTime() *pulumi.Float64Output {
	return (*pulumi.Float64Output)(r.s.State["creationTime"])
}

// The record creator.Valid values:DYNAMIC,STATIC,SYSTEM.Defaults to STATIC
func (r *arecord) Creator() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["creator"])
}

// The GSS-TSIG principal that owns this record
func (r *arecord) DdnsPrincipal() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ddnsPrincipal"])
}

// Determines if the DDNS updates for this record are allowed or not
func (r *arecord) DdnsProtected() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["ddnsProtected"])
}

// Determines if the record is disabled or not. False means that the record is enabled.
func (r *arecord) Disable() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["disable"])
}

// The name for an A record in punycode format. Values with leading or trailing white space are not valid for this field.
// Cannot be written nor updated.
func (r *arecord) DnsName() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dnsName"])
}

// Determines if the reclamation is allowed for the record or not.
func (r *arecord) ForbidReclamation() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["forbidReclamation"])
}

// IP address for hostname
func (r *arecord) Ipv4addr() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipv4addr"])
}

// Name for A record in FQDN format. This value can be in unicode format. Values with leading or trailing white space are
// not valid for this field.
func (r *arecord) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

// Determines if the record is reclaimable or not. Cannot be updated/written
func (r *arecord) Reclaimable() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["reclaimable"])
}

// The name of the shared record group in which the record resides. This field exists only on db_objects if this record is
// a shared record. Cannot be updated/written
func (r *arecord) SharedRecordGroup() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["sharedRecordGroup"])
}

// TTL in seconds for host record
func (r *arecord) Ttl() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["ttl"])
}

// Use flag for: ttl
func (r *arecord) UseTtl() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["useTtl"])
}

// The name of the DNS view in which the record resides. Example: “external”.
func (r *arecord) View() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["view"])
}

// DNS Zone for the record
func (r *arecord) Zone() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["zone"])
}

// Input properties used for looking up and filtering arecord resources.
type arecordState struct {
	// Comment for the record; maximum 256 characters
	Comment interface{}
	// The time of the record creation in Epoch seconds format.
	CreationTime interface{}
	// The record creator.Valid values:DYNAMIC,STATIC,SYSTEM.Defaults to STATIC
	Creator interface{}
	// The GSS-TSIG principal that owns this record
	DdnsPrincipal interface{}
	// Determines if the DDNS updates for this record are allowed or not
	DdnsProtected interface{}
	// Determines if the record is disabled or not. False means that the record is enabled.
	Disable interface{}
	// The name for an A record in punycode format. Values with leading or trailing white space are not valid for this field.
	// Cannot be written nor updated.
	DnsName interface{}
	// Determines if the reclamation is allowed for the record or not.
	ForbidReclamation interface{}
	// IP address for hostname
	Ipv4addr interface{}
	// Name for A record in FQDN format. This value can be in unicode format. Values with leading or trailing white space are
	// not valid for this field.
	Name interface{}
	// Determines if the record is reclaimable or not. Cannot be updated/written
	Reclaimable interface{}
	// The name of the shared record group in which the record resides. This field exists only on db_objects if this record is
	// a shared record. Cannot be updated/written
	SharedRecordGroup interface{}
	// TTL in seconds for host record
	Ttl interface{}
	// Use flag for: ttl
	UseTtl interface{}
	// The name of the DNS view in which the record resides. Example: “external”.
	View interface{}
	// DNS Zone for the record
	Zone interface{}
}

// The set of arguments for constructing a arecord resource.
type arecordArgs struct {
	// Comment for the record; maximum 256 characters
	Comment interface{}
	// The record creator.Valid values:DYNAMIC,STATIC,SYSTEM.Defaults to STATIC
	Creator interface{}
	// The GSS-TSIG principal that owns this record
	DdnsPrincipal interface{}
	// Determines if the DDNS updates for this record are allowed or not
	DdnsProtected interface{}
	// Determines if the record is disabled or not. False means that the record is enabled.
	Disable interface{}
	// The name for an A record in punycode format. Values with leading or trailing white space are not valid for this field.
	// Cannot be written nor updated.
	DnsName interface{}
	// Determines if the reclamation is allowed for the record or not.
	ForbidReclamation interface{}
	// IP address for hostname
	Ipv4addr interface{}
	// Name for A record in FQDN format. This value can be in unicode format. Values with leading or trailing white space are
	// not valid for this field.
	Name interface{}
	// Determines if the record is reclaimable or not. Cannot be updated/written
	Reclaimable interface{}
	// The name of the shared record group in which the record resides. This field exists only on db_objects if this record is
	// a shared record. Cannot be updated/written
	SharedRecordGroup interface{}
	// TTL in seconds for host record
	Ttl interface{}
	// Use flag for: ttl
	UseTtl interface{}
	// The name of the DNS view in which the record resides. Example: “external”.
	View interface{}
}
